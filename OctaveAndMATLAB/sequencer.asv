function [steps, stepinfo, direction] = sequencer(varargin)
%SEQUENCER creates a sequencer pattern from input data.
%   Params: direction (0,2,4,8), steps (1x8 array),
%   step_min, step_max, max_steps, next_step (1x8 array)
%
%   TODO: Manual GOTO code
  
  %% Set constant values and assign defaults to variables
  FORWARD = 1;
  REVERSE = 2;
  PENDULUM = 4;
  RANDOM = 8;
  RUN = 1;
  SKIP = 2;
  RESET = 4;
  STOP = 8;
  FIG_NAME = 'Sequencer';

  step_min = 1;
  step_max = 8;
  max_steps = 8;
  direction = FORWARD;
  steps = [SKIP, RUN, RUN, SKIP, RUN, RESET, RUN, RUN];
  next_step = [2, 3, 4, 5, 6, 7, 8, 1];
  directions = [FORWARD, REVERSE, PENDULUM, RANDOM];
  step_values = zeros(1, step_max);
  
  %% Validate input params, other init
  if nargin > 0
    if ~ismember(varargin{1}, directions)
      error(['Invalid direction. Use values 1 (FORWARD), ', ...
        '2 (REVERSE), 4 (PENDULUM), 8 (RANDOM).']);
    end
    
  	direction = varargin{1};
  end

  if nargin > 1
    if numel(varargin{2}) < step_max
      error('Invalid step value array.');
    end
    
    steps = varargin{2};
  end

  if nargin > 2
    max_steps = varargin{3};
  end
  
  if nargin > 3
    step_min = varargin{4};
  end
  
  if nargin > 4
    step_max = varargin{5};
  end
  
  if step_max <= step_min || step_max > numel(steps)
    error('Invalid min/max step values.');
  end

  if nargin > 5
    if numel(varargin{6}) < step_max
      error('Invalid next step value array.');
    end
      
    next_step = varargin{6};
  end
  
  stepinfo = cell(1, max_steps);

  fprintf('\nDirection: ');
	
  if direction == FORWARD
    fprintf('FORWARD\n\n');
  end
  
  if direction == REVERSE
    fprintf('REVERSE\n\n');
  end
  
  if direction == PENDULUM
    fprintf('PENDULUM\n\n');
  end
  
  if direction == RANDOM
    fprintf('RANDOM\n\n');
  end
  
  if direction == FORWARD || direction == PENDULUM
    step_change = 1;
    current_step = step_min - 1;
  else
    step_change = -1;
    current_step = step_max + 1;
  end
  
  is_stop_at_step = 0;
  reset = 0;
  
  %% Test to see if any steps have RUN status. If not, bail out
  
  % C way:
  % run_status_found = 0;
  
  % for i = 1:step_max
  %   if steps(i) == RUN
  %     run_status_found = 1;
  %     break;
  %   end
  % end
  
  % if run_status_found == 0
  %   error('No steps found with RUN status!');
  % end
  
  % MATLAB way:
  if ~ismember(steps, RUN)
    error('No steps found with RUN status!');
  end
    
  %% For loop with next step check
  for i = 1:max_steps
    breakout_counter = 0;

    if direction == RANDOM
      while true
        % current_step = randi(step_max); % NOTE: MATLAB only
        current_step = floor(rand(1) * step_max) + 1;
        if steps(current_step) == RUN
          break;
        end
      end
    else    
      while true
        breakout_counter = breakout_counter + 1;

        % To prevent eternal loops...
        if breakout_counter > (step_max * 2)
          break;
        end

        previous_step = current_step;

        if is_stop_at_step == 0
          current_step = current_step + step_change;
        end

        % Do next_step check only if we're in FORWARD mode
        if direction == FORWARD && previous_step > 0 && ...
            (steps(previous_step) ~= SKIP && steps(previous_step) ~= STOP)
          if next_step(previous_step) ~= current_step
            current_step = next_step(previous_step);
          end
        end

        if current_step > step_max
          if direction == PENDULUM && reset == 0
            current_step = step_max;
            step_change = -1;
          else
            current_step = step_min;
          end
        end

        if current_step < step_min
          if direction == PENDULUM && reset == 0
            current_step = step_min;
            step_change = 1;
          else
            current_step = step_max;
          end
        end

        % Reset 'is_stop_at_step' flag if we don't have STOP status
        % on current step
        if steps(current_step) ~= STOP
          is_stop_at_step = 0;
        end

        if steps(current_step) == STOP || steps(current_step) == RUN
          if steps(current_step) == STOP
            is_stop_at_step = 1;
          end

          break;
        end

        if steps(current_step) == RESET
          if direction == FORWARD
            current_step = step_min - 1;
          else
            current_step = step_max + 1;
          end

          % Set reset flag for correct PENDULUM mode handling
          reset = 1;
        end
      end % End while true
    end % End if direction ~= RANDOM
 
    %% Display info
    if step_change == 1
      dir_sign = '>>';
    else
      dir_sign = '<<';
    end
    
    if direction == RANDOM
      dir_sign = '<>';
    end
    
    if current_step >= step_min && current_step <= step_max && ...
        (steps(current_step) == RUN || steps(current_step) == STOP)
      step_values(i) = current_step;
      stepinfo{i} = sprintf('%d:[%d] %s', i, current_step, dir_sign);
      fprintf('%2d:[%d] %s ', i, current_step, dir_sign);
    end

    if mod(i, 8) == 0
      fprintf('\n\n');
    end
  end % End for i = 1:max_steps
  
  %% Plot it
  
  % Create a new named figure
  fignum = findobj('type', 'figure', 'name', FIG_NAME);
    
  if isempty(fignum)
    % Figure not found, create new 
    figure('name', FIG_NAME);
  else
    % Figure found, set active
    figure(fignum);
    clf;
  end
  
  h = bar(step_values);

  ylabel('Steps');
  xlabel('Duration');
  set(h, 'FaceColor', [0.46 0.58 0.60]);
  set(h, 'EdgeColor', 'black');
  set(gca, 'FontSize', 8, 'FontWeight', 'normal');
  set(gca, 'Color', [1 1 1]);
  set(gca, 'YTick', 1:step_max);
  set(gca, 'Tick', 1:step_max);
  set(gca, 'YLim', [0, step_max]);
  %set(gca, 'XTickLabel', xlabels);
  
  title(FIG_NAME, 'FontWeight', 'bold', 'FontSize', 11, ...
    'Color', 'black')
  grid off;
  box off;
  set(gca, 'YGrid', 'on');
  
end % End function

  