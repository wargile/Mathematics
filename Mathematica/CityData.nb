(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     40210,       1038]
NotebookOptionsPosition[     39029,        993]
NotebookOutlinePosition[     39370,       1008]
CellTagsIndexPosition[     39327,       1005]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Horten, Norway", Typeset`newq$$ = 
   "Horten, Norway", Typeset`chosen$$ = 
   "Entity[\"City\", {\"Horten\", \"Vestfold\", \"Norway\"}]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["Horten, Norway", 
               Defer[
                Entity["City", {"Horten", "Vestfold", "Norway"}]], 
               "Fast parse"]; Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Horten, Norway", 
                  Defer[
                   Entity["City", {"Horten", "Vestfold", "Norway"}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Horten\"", ",", "\"Vestfold\"", ",", "\"Norway\""}], 
                    "}"}]}], "]"}],
                   "\"Entity[\\\"City\\\", {\\\"Horten\\\", \\\"Vestfold\\\", \
\\\"Norway\\\"}]\"","\"city\""},
                  "Entity"],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Horten\"", ",", "\"Vestfold\"", ",", "\"Norway\""}], 
                    "}"}]}], "]"}],
                   "\"Entity[\\\"City\\\", {\\\"Horten\\\", \\\"Vestfold\\\", \
\\\"Norway\\\"}]\"","\"city\""},
                  "Entity"],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    TemplateBox[{"\"Horten\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", 
                    "\"Norway\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Horten\\\", \
\\\"Vestfold\\\", \\\"Norway\\\"}]\"", "\"city\""}, "Entity"]], "Input"], 
                  All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  "Horten, Norway", 
                   Defer[
                    Entity["City", {"Horten", "Vestfold", "Norway"}]], 
                   "Fast parse"]; Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Horten, Norway", 
                    Defer[
                    Entity["City", {"Horten", "Vestfold", "Norway"}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", 
                    "\"Norway\""}], "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"Horten\\\", \
\\\"Vestfold\\\", \\\"Norway\\\"}]\"","\"city\""},
                    "Entity"],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", 
                    "\"Norway\""}], "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"Horten\\\", \
\\\"Vestfold\\\", \\\"Norway\\\"}]\"","\"city\""},
                    "Entity"],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    TemplateBox[{"\"Horten\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", 
                    "\"Norway\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Horten\\\", \
\\\"Vestfold\\\", \\\"Norway\\\"}]\"", "\"city\""}, "Entity"]], "Input"], 
                    All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
     RowBox[{"\"City\"", ",", 
       RowBox[{"{", 
         RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", "\"Norway\""}], 
         "}"}]}], "]"}],
   "\"Entity[\\\"City\\\", {\\\"Horten\\\", \\\"Vestfold\\\", \
\\\"Norway\\\"}]\"","\"city\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.6403599741950026`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CityData", "[", 
  RowBox[{
   TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", "\"Norway\""}], 
           "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"Horten\\\", \\\"Vestfold\\\", \
\\\"Norway\\\"}]\"","\"city\""},
    "Entity"], ",", "\"\<Population\>\""}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 TemplateBox[{"17940","\"people\"","people","\"People\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.6403602200215826`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CityData", "[", 
  RowBox[{
   TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", "\"Norway\""}], 
           "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"Horten\\\", \\\"Vestfold\\\", \
\\\"Norway\\\"}]\"","\"city\""},
    "Entity"], ",", "\"\<Elevation\>\""}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 TemplateBox[{"26","\"m\"","meters","\"Meters\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.640360224514032*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CityData", "[", 
  RowBox[{
   TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", "\"Norway\""}], 
           "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"Horten\\\", \\\"Vestfold\\\", \
\\\"Norway\\\"}]\"","\"city\""},
    "Entity"], ",", "\"\<TimeZone\>\""}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 TemplateBox[{"1","\"h\"","hours","\"Hours\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.6403602266452446`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WeatherData", "[", 
  RowBox[{
   TemplateBox[{"\"Horten\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Horten\"", ",", "\"Vestfold\"", ",", "\"Norway\""}], 
           "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"Horten\\\", \\\"Vestfold\\\", \
\\\"Norway\\\"}]\"","\"city\""},
    "Entity"], ",", "\"\<Temperature\>\""}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 TemplateBox[{"9.`","\"\[Degree]C\"","degrees Celsius","\"DegreesCelsius\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.6403602523808184`*^9, 3.6403966698146334`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "York, PA, United States", Typeset`newq$$ = 
   "York, PA, United States", Typeset`chosen$$ = 
   "Entity[\"City\", {\"York\", \"Pennsylvania\", \"UnitedStates\"}]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "York, PA, United States", 
                  Defer[
                   Entity["City", {"York", "Pennsylvania", "UnitedStates"}]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 TemplateBox[{"\"York\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"York\"", ",", "\"Pennsylvania\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}],
                   "\"Entity[\\\"City\\\", {\\\"York\\\", \
\\\"Pennsylvania\\\", \\\"UnitedStates\\\"}]\"","\"city\""},
                  "Entity"],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 TemplateBox[{"\"York\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"York\"", ",", "\"Pennsylvania\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}],
                   
                   "\"Entity[\\\"City\\\", {\\\"York\\\", \
\\\"Pennsylvania\\\", \\\"UnitedStates\\\"}]\"","\"city\""},
                  "Entity"],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    TemplateBox[{"\"York\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"York\"", ",", "\"Pennsylvania\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"York\\\", \\\"Pennsylvania\\\
\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "York, PA, United States", 
                    Defer[
                    Entity["City", {"York", "Pennsylvania", "UnitedStates"}]],
                     "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    TemplateBox[{"\"York\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"York\"", ",", "\"Pennsylvania\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"York\\\", \\\"Pennsylvania\\\
\", \\\"UnitedStates\\\"}]\"","\"city\""},
                    "Entity"],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    TemplateBox[{"\"York\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"York\"", ",", "\"Pennsylvania\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"York\\\", \\\"Pennsylvania\\\
\", \\\"UnitedStates\\\"}]\"","\"city\""},
                    "Entity"],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    TemplateBox[{"\"York\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"York\"", ",", "\"Pennsylvania\"", ",", 
                    "\"UnitedStates\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"York\\\", \\\"Pennsylvania\\\
\", \\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 TemplateBox[{"\"York\"",RowBox[{"Entity", "[", 
     RowBox[{"\"City\"", ",", 
       RowBox[{"{", 
         RowBox[{
          "\"York\"", ",", "\"Pennsylvania\"", ",", "\"UnitedStates\""}], 
         "}"}]}], "]"}],
   "\"Entity[\\\"City\\\", {\\\"York\\\", \\\"Pennsylvania\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.6403602786104407`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CityData", "[", 
  RowBox[{
   TemplateBox[{"\"York\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"York\"", ",", "\"Pennsylvania\"", ",", 
             "\"UnitedStates\""}], "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"York\\\", \\\"Pennsylvania\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
    "Entity"], ",", "\"\<Population\>\""}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 TemplateBox[{"43550","\"people\"","people","\"People\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.640360282881868*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WeatherData", "[", 
  RowBox[{
   TemplateBox[{"\"York\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"York\"", ",", "\"Pennsylvania\"", ",", 
             "\"UnitedStates\""}], "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"York\\\", \\\"Pennsylvania\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
    "Entity"], ",", "\"\<Temperature\>\""}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 TemplateBox[{"18.3`","\"\[Degree]C\"","degrees Celsius","\"DegreesCelsius\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.6403602958691664`*^9, 3.640396643172969*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"bikes", " ", "=", "  ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<http://api.citybik.es/v2/networks\>\"", ",", " ", "\"\<JSON\>\""}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.640398726168248*^9, 3.640398739600591*^9}, {
  3.6403988302436543`*^9, 3.640398899325562*^9}, {3.6403990106656947`*^9, 
  3.6403990718808155`*^9}, {3.6403992421338396`*^9, 3.640399296100236*^9}}]
},
WindowSize->{680, 771},
WindowMargins->{{6, Automatic}, {Automatic, 2}},
FrontEndVersion->"10.1 for Microsoft Windows (64-bit) (March 23, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 17890, 430, 75, "WolframAlphaShortInput"],
Cell[18473, 454, 380, 9, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18890, 468, 444, 11, 43, "Input"],
Cell[19337, 481, 142, 3, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19516, 489, 443, 11, 43, "Input"],
Cell[19962, 502, 132, 3, 38, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20131, 510, 442, 11, 43, "Input"],
Cell[20576, 523, 131, 3, 38, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20744, 531, 448, 11, 43, "Input"],
Cell[21195, 544, 185, 3, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21417, 552, 15407, 371, 75, "WolframAlphaShortInput"],
Cell[36827, 925, 405, 10, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37269, 940, 472, 12, 43, "Input"],
Cell[37744, 954, 140, 3, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37921, 962, 476, 12, 43, "Input"],
Cell[38400, 976, 185, 3, 39, "Output"]
}, Open  ]],
Cell[38600, 982, 425, 9, 88, "Input"]
}
]
*)

(* End of internal cache information *)
